{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["MyPerson","props","person","dataContext","userId","userPrincipalName","App","useState","isSignedIn","setIsSignedIn","useEffect","updateState","provider","Providers","globalProvider","state","ProviderState","SignedIn","onProviderUpdated","removeProviderUpdatedListener","useIsSignedIn","className","href","personQuery","view","ViewType","twolines","resource","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ProxyProvider","a","ReactDOM","render","document","getElementById"],"mappings":"+PA0BA,IAAMA,EAAW,SAACC,GAChB,IAAMC,EAASD,EAAME,YACrB,OAAO,cAAC,SAAD,CAAQC,OAAQF,EAAOG,qBA0BjBC,MAvBf,WACE,MA1BF,WACE,MAAoCC,oBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAgBA,OAdAC,qBAAU,WACR,IAAMC,EAAc,WAClB,IAAMC,EAAWC,YAAUC,eAC3BL,EAAcG,GAAYA,EAASG,QAAUC,gBAAcC,WAM7D,OAHAJ,YAAUK,kBAAkBP,GAC5BA,IAEO,WACLE,YAAUM,8BAA8BR,MAEzC,IAEI,CAACH,GASaY,GAAdZ,EAAP,oBAEA,OACE,sBAAKa,UAAU,MAAf,UACE,mCACE,mBAAGA,UAAU,WAAWC,KAAK,SAA7B,iCACA,mBAAGD,UAAU,WAAWC,KAAK,UAA7B,wBAEF,8BACGd,GACC,gCACA,cAAC,SAAD,CAAQe,YAAY,KAAKC,KAAMC,WAASC,WACxC,cAAC,MAAD,CAAKC,SAAS,KAAd,SACE,cAAC,EAAD,eC/BGC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,SCDdhB,YAAUC,eAAiB,IAAIuB,IAAc,aAAlB,sBAAgC,sBAAAC,EAAA,+EAClD,CACL,wBAAyB,QACzB,0BAA2B,gCAH4B,4CAO3DC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,SAM1Bd,M","file":"static/js/main.0af7aba7.chunk.js","sourcesContent":["import React, { useState, useEffect }from 'react';\nimport './App.css';\nimport { Get, Person, ViewType, MgtTemplateProps } from '@microsoft/mgt-react';\nimport { Providers, ProviderState } from '@microsoft/mgt-element';\nimport * as MicrosoftGraph from '@microsoft/microsoft-graph-types';\n\nfunction useIsSignedIn(): [boolean] {\n  const [isSignedIn, setIsSignedIn] = useState(false);\n\n  useEffect(() => {\n    const updateState = () => {\n      const provider = Providers.globalProvider;\n      setIsSignedIn(provider && provider.state === ProviderState.SignedIn);\n    };\n\n    Providers.onProviderUpdated(updateState);\n    updateState();\n\n    return () => {\n      Providers.removeProviderUpdatedListener(updateState);\n    }\n  }, []);\n\n  return [isSignedIn];\n}\n\nconst MyPerson = (props: MgtTemplateProps) => {\n  const person = props.dataContext as MicrosoftGraph.User;\n  return <Person userId={person.userPrincipalName  as string}></Person>;\n}\n\nfunction App() {\n  const [isSignedIn] = useIsSignedIn();\n\n  return (\n    <div className=\"App\">\n      <header>\n        <a className=\"App-link\" href=\"/login\"> Login with Google </a>\n        <a className=\"App-link\" href=\"/logout\"> Logout</a>\n      </header>\n      <div>\n        {isSignedIn &&\n          <div>\n          <Person personQuery=\"me\" view={ViewType.twolines} />\n          <Get resource=\"me\">\n            <MyPerson />\n          </Get>\n        </div>\n        }\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Providers } from '@microsoft/mgt-element';\nimport { ProxyProvider } from '@microsoft/mgt-proxy-provider';\n\nProviders.globalProvider = new ProxyProvider(\"/api/proxy\", async () => {\n  return {\n    \"X-MS-TOKENPROVIDER-ID\": 'graph',\n    \"X-MS-PROXY-BACKEND-HOST\": 'https://graph.microsoft.com'\n  };\n});\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}